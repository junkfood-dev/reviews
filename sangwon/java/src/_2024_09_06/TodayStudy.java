package _2024_09_06;

public class TodayStudy {
    // class 구성멤버
    // 1.필드
    // 객체의 고유데이터가 저장되는 곳
    // 클래스 전역에서 사용가능
    // 2.생성자
    // 클래스명과 메소드명이 동일
    // 리턴 타입을 정의하지 않음.
    // 객체가 생성될 때 자동으로 한번 호출
    // 객체의 초기화 담당
    // 디폴트생성자 - 작성한 생성자가 하나도 없을때 컴파일러가 자동으로 생성
    // 3.메소드
    // 필드의 값을 할당하거나 필드의 동작 정의
    // 리턴 - 리턴타입이 있을 때 메소드가 실행된 결과를 호출한 곳에 넘겨줌
    //
    // this
    // 객체 자신
    // 인스턴스화 되었을 때 자기자신의 메모리 주소를 담고있음
    //
    // 오버로딩
    // 이름이 같은 메소드(또는 생성자)를 여러개 만들어 다양한 매개변수 정의
    // 오버라이딩
    // 상위 클래스가 가지고 있는 메소드를 하위 클래스가 재정의사용
    //
    // final필드
    // 초기값이 지정되면 수정안됨
    // 필드선언시, 생성자에서 사용가능
    // 상수는 아님 - 객체마다 저장되고 생성자 매개변수로 여러가지 값을 가질수 있다.
    //
    // 상수
    // 불변의 값을 저장하는 필드 (원주율같은거)
    //
    // 접근제어자
    // 1.private
    // 해당클래스 안에서만 접근가능
    // 2.default
    // 접근제어자 설정안하면 기본값
    // 동일한 패키지 안에서만 접근가능
    // 3.protected
    // 동일패키지, 해당클래스를 상속받은 클래스에서만 접근가능
    // 4.public
    // 어떤 클래스에서도 접근가능
    //
    // setter/getter
    // 객체지향에서 일반적으로 객체의 데이터는 외부에서 직접적으로 접근하는것을 막음(private)
    // 객체의 데이터를 외부에서 마음대로 읽고, 수정하면 객체의 무결성이 깨짐
    //
    // setter
    // public void setXxx(타입 필드명)
    // 데이터는 외부에서 접근할수 없게 막고, 메소드는 공개해서 외부에서 메소드를 통해 데이터에 접근하도록 유도
    // 메소드는 매개값을 검증해서 유효한 값만 데이터로 저장하게함
    //
    // getter
    // public 타입 getXxx()
    // 리턴값 : 필드값
    // 외부에서 객체의 데이터를 읽을 때
    // 필드값을 가공후 외부로 전달
}
