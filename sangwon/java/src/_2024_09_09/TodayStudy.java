package _2024_09_09;

public class TodayStudy {
    public static void main(String[] args) {
        // 어노테이션 -> (메타데이터)컴파일러에게 정보 제공, 특별한동작을 하진않음.
        // 사용하면 개발자의 실수를 줄일수 있음. - 코드문법에러를 체크해줌
        // 소프트웨어 개발 툴이 빌드나 배치시 코드를 자동으로 생성할 수 있도록 정보 제공

        // 상속
        // public class 클래스명 extends 상속받을클래스 {}
        // 상속받은 클래스의 필드와 메소드를 사용하기(접근제어자가 우선)
        // 클래스 재사용과 기능확장용이함
        // 다중 상속 지원 X (하나의 부모클래스만 가질 수 있음)
        // 자식클래스의 생성자 안에는 암묵적으로 부모클래스의 생성자를 호출하는 코드가 포함되어있음(super)
        // 부모클래스에 디폴트생성자가 없다면 자식클래스에 super(매개변수) 꼭 써주자 - 생성자 최상단에 있어야함

        // 오버라이딩(@Ooverride)
        // 타입 메소드명 매개변수가 모두 같고, 자식클래스에서 재정의할 때 사용
        // 부모클래스의 접근제어자보다 상속받은 클래스의 접근제어자 범위가 커지는 것은 가능
        // 오버로딩
        // 같은이름으로 매개변수를 다르게 만듬(타입이나 개수)

        // 추상메소드 (abstract)
        // abstract 리턴타입 메소드명 ();
        // 자식 클래스에서 반드시 오버라이드 해야만 사용 가능

        // 추상클래스 (abstract class)
        // 추상메소드를 하나이상 포함하는 클래스
        // 추상클래스만으로는 객체를 생성할 수 없다.(참조타입으로는 사용 가능 - 다형성)
        // 추상메소드를 자식클래스에서 반드시 재정의해야함.
        // 기능을 구현 하기 전에 밑그림작업
        // 설계 규격을 통일하고 오류나 실수 없이 구현하기 위해 사용
    }
}
