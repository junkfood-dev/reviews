package _2024_09_01._01;

public class BasicReviews {
    public static void main(String[] args) {
        // 변수
        // char int long float double boolean

        // 기본적으로 카멜표기법
        // _ $ 숫자 영문 (숫자시작 X)
        // 클래스 파스칼
        // 상수는 전부 대문자 스네이크 (선언시 앞에 final 붙이기)

        // 형변환
        // 자동형변환 작은타입 -> 큰타입 (int long float double 순)
        // 수동형변환 큰타입 -> 작은타입 (앞에 타입붙이기)

        // 삼항연산자
        // 결과 = (조건) ? (참일경우) : (거짓일경우)

        // 문자열 String
        // toUpperCase 대문자로
        // toLowerCase 소문자로
        // contains true false (있는지 없는지)
        // indexOf 위치정보 (찾는게 없으면 -1 반환)
        // lastIndexOf 뒤에서부터 찾기 (마지막에 일치하는 위치)
        // replace 타겟문자지우고 새로운문자넣기
        // substring slice 개념
        // trim 공백 제거 (앞뒤만 지워줌 문자사이 공백지우고 싶으면 replace 쓰자)
        // concat 문자열 결합하기
        // equals 비교하기 true false 대소문자구분함 (equalsIgnoreCase 대소문자구분 X)

        // 이스케이프 문자
        // /n 줄바꿈
        // /t 정렬하기 (탭만큼띄어쓰기)
        // \\로 적어야 \ 표시됨 (경로쓸때 주로사용)
        // \' \" 문자열 내 따옴표 사용할 때

        // if, else if, else
        // 여러 조건이 있을때

        // switch, case, default
        // 명확한 케이스 있을 때
        // break 쓰기
        // default 모든 case 에 해당안될때 사용 (없어도됨)

        // for (동기) : 에러발생시 에러위치 이후 이벤트 동작안함
        // 명확한 횟수가 있을 때
        // for (초기화식; 조건문; 증감식) {}

        // for each (비동기) : 에러발생해도 동작함
        // for (자료형 변수명 : 배열이나 컨테이너값) {}
        // 복잡한 반복문에 적합하고 수행속도가 빠름
        // 읽기전용, 역순탐색 X

        // continue 다음 문장이 있어도 수행하지않고 for문 처음으로 돌아감

        // while
        // while (조건) {}
        // 명확한 횟수가 없을 때
        // 무한루프 조심 break, 증감식
        // do {} while(){} (do 안에 코드 무조건 실행)

        // 배열 (1.2.3 똑같음)
//        1. String[] x = new String[3];
//            x[0] = "A";
//            x[1] = "B";
//            x[2] = "C";
//        2. String[] x = new String[] {"A", "B", "C"};
//        3. String[] x = {"A", "B", "C"};

        // 아스키 코드 (ANSI)
        // 알파벳 대문자는 65부터, 소문자는 97부터, 숫자는 48부터 시작

        // 메소드 (함수)
        // 특정 기능을 하는 코드를 묶어놓은 것
        // 반환타입 메소드명 () {}

        // 오버로딩
        // 같은이름으로 여러 메소드가 있더라도 매개변수의 개수 또는 타입이 다르면 사용가능
        // 상속관계, 부모클래스의 접근제어자보다 더넓은 범위로 자식클래스 설정가능

        // 오버라이딩
        // 부모 클래스로부터 상속받은 메소드를 자식클래스에 재정의
        // 메소드 이름,매개변수.리턴값이 모두 같아야함
        // 같은 클래스 내에서만 적용, 모든접근제어자 사용 가능
    }
}
